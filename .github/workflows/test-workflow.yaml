name: Code analysis, checks and tests

on:
  push:
    branches-ignore:
      - 'dependabot/**'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_ENV: test
  PIMCORE_TEST_REDIS_DSN: "redis://127.0.0.1:63379"
  TEST_DATABASE_HOST: 127.0.0.1
  TEST_RABBIT_MQ_HOST: 127.0.0.1
  TEST_RABBIT_MQ_PORT: 55672
  TEST_RABBIT_MQ_USER: guest
  TEST_RABBIT_MQ_PASSWORD: guest
  RABBITMQ_URL: "amqp://guest:guest@127.0.0.1:55672/"

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      php-changes: ${{ steps.filter.outputs.php }}
      js-changes: ${{ steps.filter.outputs.js }}
      has-changes: ${{ steps.filter.outputs.any }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          sparse-checkout: |
            src
            public
            assets
            tests
            composer.json
            composer.lock
            package.json
            package-lock.json
            yarn.lock
            lib

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Detect changed files
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            php:
              - '**/*.php'
              - 'composer.json'
              - 'composer.lock'
            js:
              - '**/*.js'
              - '**/*.ts'
              - '**/*.vue'
              - 'package.json'
              - 'yarn.lock'
              - 'vite.config.*'
            any:
              - '**/*'

      - name: Cache Composer dependencies
        if: ${{ steps.filter.outputs.php == 'true' }}
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-

      - name: Cache Yarn dependencies
        if: ${{ steps.filter.outputs.js == 'true' }}
        uses: actions/cache@v3
        with:
          path: node_modules
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-

      - name: Install PHP & dependencies
        if: ${{ steps.filter.outputs.php == 'true' }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
          ini-values: memory_limit=-1, date.timezone='UTC'
          tools: composer:v2

      - run: composer install --prefer-dist --no-progress --no-interaction
        if: ${{ steps.filter.outputs.php == 'true' }}

      - name: Setup Node.js
        if: ${{ steps.filter.outputs.js == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Enable Corepack & install Yarn deps
        if: ${{ steps.filter.outputs.js == 'true' }}
        run: |
          corepack enable
          yarn install --refresh-lockfile --no-immutable

      - name: Create build context
        run: |
          mkdir -p build-context
          if [ "${{ steps.filter.outputs.php }}" == "true" ] && [ -d "vendor" ]; then cp -r vendor build-context/; fi
          if [ "${{ steps.filter.outputs.js }}" == "true" ]; then
            [ -d ".yarn" ] && cp -r .yarn build-context/
            [ -d "node_modules" ] && cp -r node_modules build-context/
          fi
          [ -d "lib" ] && cp -r lib build-context/
          touch build-context/.gitkeep

      - uses: actions/upload-artifact@v4
        with:
          name: build-context
          path: build-context
          retention-days: 1

  php-static-analysis:
    needs: setup
    if: ${{ needs.setup.outputs.php-changes == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql

      - uses: actions/download-artifact@v4
        with:
          name: build-context
          path: .

      - run: |
          [ -d "build-context/vendor" ] && mv build-context/vendor ./ || echo "No vendor found"

      - run: |
          [ -f "vendor/bin/phpstan" ] || composer require --dev phpstan/phpstan
          composer phpstan --ansi || vendor/bin/phpstan analyse -c phpstan.neon src -l 5 --memory-limit=1G

  php-coding-standards:
    needs: setup
    if: ${{ needs.setup.outputs.php-changes == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql

      - uses: actions/download-artifact@v4
        with:
          name: build-context
          path: .

      - run: |
          [ -d "build-context/vendor" ] && mv build-context/vendor ./ || echo "No vendor found"

      - run: composer check-cs --ansi

  php-tests:
    needs: setup
    if: ${{ needs.setup.outputs.php-changes == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 63379:6379
      rabbitmq:
        image: rabbitmq
        options: >-
          --health-cmd "rabbitmqctl node_health_check"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 55672:5672
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
          coverage: xdebug

      - uses: getong/mariadb-action@v1.11
        with:
          mariadb version: '10.6'
          mysql database: 'testing'
          mysql user: 'db'
          mysql password: ${{ secrets.TEST_DATABASE_PASSWORD }}

      - uses: actions/download-artifact@v4
        with:
          name: build-context
          path: .

      - run: |
          [ -d "build-context/vendor" ] && mv build-context/vendor ./ || echo "No vendor found"
          [ -d "build-context/lib" ] && mv build-context/lib ./ || echo "No lib found"

      - run: |
          git submodule update --init --recursive
          [ -d "lib/StorybookBundle/src" ] || {
            mkdir -p lib/StorybookBundle/src
            echo "<?php namespace Sensiolabs\\StorybookBundle; class StorybookBundle {}" > lib/StorybookBundle/src/StorybookBundle.php
          }

      - run: php bin/console pimcore:deployment:classes-rebuild -f --no-interaction

      - run: php vendor/bin/codecept run --disable-coverage-php --phpunit-xml --coverage --coverage-xml

      - uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            tests/_output
            coverage.xml
          retention-days: 1

  js-matrix:
    needs: setup
    if: ${{ needs.setup.outputs.js-changes == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        check: ['lint', 'format', 'test']
        include:
          - check: lint
            cmd: yarn lint
            name: ESLint
          - check: format
            cmd: yarn format
            name: Prettier
          - check: test
            cmd: yarn vitest run --coverage
            name: Vitest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - run: corepack enable

      - uses: actions/download-artifact@v4
        with:
          name: build-context
          path: .

      - run: |
          [ -d "build-context/node_modules" ] && mv build-context/node_modules ./
          [ -d "build-context/.yarn" ] && mv build-context/.yarn ./
          [ -d "build-context/lib" ] && mv build-context/lib ./

      - run: |
          rm -rf .yarn/cache .yarn/install-state.gz || true
          yarn install --immutable

      - run: ${{ matrix.cmd }}

      - uses: actions/upload-artifact@v4
        if: matrix.check == 'test'
        with:
          name: js-coverage
          path: coverage
          retention-days: 1

  build-check:
    needs: setup
    if: ${{ always() }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - run: |
          if [ ! -f "public/build/.vite/manifest.json" ]; then
            echo "::error::ðŸš« You have to compile a production build before deploying."
            exit 1
          else
            echo "âœ… Great! Production build is present."
          fi

  sonarqube:
    needs: [php-tests, js-matrix]
    if: ${{ always() && (needs.setup.outputs.has-changes == 'true') }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        if: ${{ needs.php-tests.result == 'success' }}
        with:
          name: test-results
          path: tests/_output

      - uses: actions/download-artifact@v4
        if: ${{ needs.js-matrix.result == 'success' }}
        with:
          name: js-coverage
          path: coverage

      - uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

