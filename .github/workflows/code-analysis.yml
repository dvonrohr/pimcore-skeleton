name: Project

on:
  push:

env:
  APP_ENV: test
  PIMCORE_TEST_REDIS_DSN: "redis://127.0.0.1:63379"
  TEST_DATABASE_HOST: 127.0.0.1
  TEST_RABBIT_MQ_HOST: 127.0.0.1
  TEST_RABBIT_MQ_PORT: 55672
  TEST_RABBIT_MQ_USER: guest
  TEST_RABBIT_MQ_PASSWORD: guest
  RABBITMQ_URL: "amqp://guest:guest@127.0.0.1:55672/"
  MYSQL_PASSWORD: ${{ secrets.TEST_DATABASE_PASSWORD }}

jobs:
  setup:
    name: "üõ†Ô∏è Setup Environment"
    runs-on: ubuntu-latest
    outputs:
      composer_version: ${{ steps.composer-install.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize and update submodules
        run: git submodule update --init --recursive

      ### PHP Setup
      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
          ini-values: memory_limit=-1, date.timezone='UTC'
          coverage: xdebug
          tools: composer:v2

      - name: Install MariaDB
        uses: getong/mariadb-action@v1.11
        with:
          mariadb version: '10.6'
          mysql database: 'testing'
          mysql user: 'db'
          mysql password: ${{ secrets.TEST_DATABASE_PASSWORD }}

  cache_composer:
    name: "üêò Composer Dependency Cache & Install"
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Validate composer.json and composer.lock
        run: composer validate
        continue-on-error: true

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

  php_tests:
    name: "üêò PHP Tests & Static Analysis"
    needs: [setup, cache_composer]  # Depends on setup and composer cache job
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (contains(join(github.event.commits.*.modified, ','), '.php') || contains(join(github.event.commits.*.added, ','), '.php') || contains(join(github.event.commits.*.removed, ','), '.php') || contains(join(github.event.commits.*.modified, ','), 'composer.json') || contains(join(github.event.commits.*.modified, ','), 'composer.lock') || contains(join(github.event.commits.*.added, ','), 'composer.json') || contains(join(github.event.commits.*.added, ','), 'composer.lock') || contains(join(github.event.commits.*.removed, ','), 'composer.json') || contains(join(github.event.commits.*.removed, ','), 'composer.lock') || ((contains(join(github.event.commits.*.modified, ','), '/config/') || contains(join(github.event.commits.*.added, ','), '/config/') || contains(join(github.event.commits.*.removed, ','), '/config/') || contains(join(github.event.commits.*.modified, ','), '/src/') || contains(join(github.event.commits.*.added, ','), '/src/') || contains(join(github.event.commits.*.removed, ','), '/src/') || contains(join(github.event.commits.*.modified, ','), '/vendor/') || contains(join(github.event.commits.*.added, ','), '/vendor/') || contains(join(github.event.commits.*.removed, ','), '/vendor/')) && (contains(join(github.event.commits.*.modified, ','), '.yaml') || contains(join(github.event.commits.*.added, ','), '.yaml') || contains(join(github.event.commits.*.removed, ','), '.yaml'))) ) }}
    services:
      redis:
        image: redis
        ports:
          - 63379:6379
      rabbitmq:
        image: rabbitmq
        ports:
          - 55672:5672
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Codeception tests
        run: php vendor/bin/codecept run --disable-coverage-php --phpunit-xml --coverage --coverage-xml
        continue-on-error: true
        id: codeception-tests

      - name: Run PHPStan
        run: composer phpstan --ansi || echo "::error::PHPStan analysis failed"
        continue-on-error: true
        id: phpstan

      - name: Run Coding Standard check
        run: composer check-cs --ansi || echo "::error::Coding Standard check failed"
        continue-on-error: true
        id: coding-standard

  cache_yarn:
    name: "üì¶ Yarn Dependency Cache & Install"
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.yarn
            .yarn/cache
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Enable Corepack
        run: corepack enable

      - name: Install Yarn dependencies
        run: yarn install --frozen-lockfile

  js_tests:
    name: "üßë‚Äçüíª JavaScript Lint, Format & Tests"
    needs: [setup, cache_yarn]  # Depends on setup and yarn cache job
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (contains(join(github.event.commits.*.modified, ','), '.js') || contains(join(github.event.commits.*.added, ','), '.js') || contains(join(github.event.commits.*.removed, ','), '.js') || contains(join(github.event.commits.*.modified, ','), 'package.json') || contains(join(github.event.commits.*.modified, ','), 'yarn.lock') || contains(join(github.event.commits.*.added, ','), 'package.json') || contains(join(github.event.commits.*.added, ','), 'yarn.lock') || contains(join(github.event.commits.*.removed, ','), 'package.json') || contains(join(github.event.commits.*.removed, ','), 'yarn.lock')) }}
    services:
      redis:
        image: redis
        ports:
          - 63379:6379
      rabbitmq:
        image: rabbitmq
        ports:
          - 55672:5672
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Run ESLint
        run: |
          npx eslint . || echo "::error::ESLint failed"
        continue-on-error: true
        id: eslint

      - name: Run Prettier
        run: |
          npx prettier --check . || echo "::error::Prettier check failed"
        continue-on-error: true
        id: prettier

      - name: Run Vitest with coverage
        run: |
          npx vitest run --coverage || echo "::error::Vitest tests failed"
        continue-on-error: true
        id: vitest

  vite_build:
    name: "‚ö° Vite Production Build Check"
    needs: js_tests  # This job depends on js_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for Vite build
        id: check-build
        run: |
          if [ ! -f "public/build/.vite/manifest.json" ]; then
            echo "::error::üö´ You have to compile a production build before deploying."
            exit 1
          else
            echo "‚úÖ Great! Looks like you've compiled a production build."
          fi

  sonar_scan:
    name: "üîé SonarQube Code Quality Scan"
    needs: [php_tests, js_tests]  # This job depends on both php_tests and js_tests jobs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: SonarQube scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
